#!/usr/bin/env python

from sys import argv
from sys import stdout
from random import randint

'''
Generic
	Cavernous
	Cramped
	Volcanic
	Mushroom
	Aquatic
	Ruin
	Boneyard
'''

def usage():
    print('underDark [# of chambers] [type(optional)]')

def chamber():
    chamber = ['armory', 'audience chamber', 'aviary', 'banquet room',
        'barracks', 'latrine', 'bedroom', 'bestiary', 'cell', 'torture chamber', 'laboratory']
    dressing = ['The air feels damp and clammy', 'You feel a draft', 'You feel a draft of cold air',
        'A cold and foggy mist clings to you',
        'A mist covers the floor', 'The air feels warm', 'The air is hazy and humid',
        'The air is steamy and humid', 'You smell smoke',
        'Mist covers the ceiling', 'You smell an acrid odor', 'You smell a chemical odor',
        'You smell a dank or moldy odor',
        'You smell an earthy odor', 'You smell a manure odor', 'You smell a metallic odor',
        'You smell an ozone odor', 'You smell a putrid odor', 'You smell a rotting odor',
        'The air feels salty and moist', 'You smell a smoky odor', 'You smell a stale odor',
        'You smell a sulfurous odor', 'You smell a stinky odor']
    content = []
    content.append('A monster (dominant inhabitant)\n\t- motivation: ' + motivation())
    content.append('A monster (dominant inhabitant) with ' + treasure() + '\n\tmotivation: ' + motivation())
    content.append('A monster (pet or allied creature)\n\t- motivation: ' + motivation())
    content.append('A monster (pet or allied creature) guarding ' + treasure())
    content.append('A monster (random creature)\n\t- motivation: ' + motivation())
    content.append('A monster (random creature) with ' + treasure() + '\n\t- motivation: ' + motivation())
    content.append(hazard() + ' with ' + treasure())
    content.append(obstacle())
    content.append('A Trap! ' + trap())
    content.append('A Trap! ' + trap()+ treasure() + thing_location())
    content.append(trick())
    content.append('The room appears empty')

    if randint(0,2) > 1:
        return('\n\n\t\033[91m' + chamber[randint(0,len(chamber)-1)].title() + '\033[0m\n\t'
        + dressing[randint(0,len(dressing)-1)] + '\n\tThe room appears empty')
    else:
        return('\n\n\t\033[91m' + chamber[randint(0,len(chamber)-1)].title() + '\033[0m\n\t'
        + dressing[randint(0,len(dressing)-1)] + '\n\t' + content[randint(0,len(content)-1)])

def thing_location():
    data = ['in the cupboard', 'buried shallowly', 'in a cobwebby wall nook', 'beneath a hidden panel',
        'behind a hidden panel', 'above a hidden panel', 'inside a statue' ,'buried in the firepit',
        'beneath a pile of rubble', 'beneath a pile of rubbish', 'on a pedestal',
        'in the bottom of a pool of water', 'in the bottom of a pool of slimy green water',
        'wrapped up in cobwebs', 'laying in the corner', 'in the middle of the room',
        'in a shaft of light', 'on top of a pile of rubble', 'on top of a pile of rubbish',
        'halfway stuck in a pile of rubbish', 'halfway stuck in a pile of rubble', 'in the dirt',
        'next to several dead spiders', 'beneath the rug', 'behind a panel', 'beneath a trap door']
    return(data[randint(0,len(data)-1)])

def trick():
    thing = ['Book', 'Brain in a jar', 'Burning fire', 'Cracked gem', 'Door', 'Fresco', 'Furniture',
    'Glass sculpture', 'Mushroom field', 'Painting', 'Plant or tree', 'Pool of water',
    'Runes engraved on wall or floor', 'Skull', 'Sphere of magical energy', 'Statue', 'Stone obelisk',
    'Suit of armor', 'Tapestry or rug', 'Target dummy', 'Canoptic Jar', 'Vial of liquid',
    'Crystal ball', 'Glass bead', 'Femur', 'Ribcage', 'Skeleton', 'Old book']
    trick = ['emits a cloud of dust', 'glows briefly when touched', 'vibrates', 'emits a faint tune',
        'emits a faint smell', 'produces a mild shock when touched', 'tastes salty', 'tastes sweet',
        'heals 1 hit point when touched', 'produces mild visions when touched']
    return('a ' + thing[randint(0,len(thing)-1)] + ' which ' + trick[randint(0,len(trick)-1)])

def trap():
    trigger = ['Stepped on (floor, stairs)', 'Moved through (doorway, hallway)',
        'Touched (doorknob, statue)', 'Opened (door, chest)', 'Looked at (mirror, arcane symbol)',
        'Moved (cart, block)']
    severity = ['Setback', 'Dangerous', 'Deadly']
    effect = ['trap effect: ' + str(randint(0,99))]
    return('\n\t- Trigger: ' + trigger[randint(0,len(trigger)-1)] + ', '
    + '\n\t- Severity: ' + severity[randint(0,len(severity)-1)] + ', '
    + '\n\t- Trap Effect: ' + effect[randint(0,len(effect)-1)])

def obstacle():
    data = ['obstacle#' + str(randint(0,99)) + '!']
    return(data[randint(0,len(data)-1)])

def treasure():
    data = ['treasure#' + str(randint(0,99)) + '!']
    return(data[randint(0,len(data)-1)])

def motivation():
    data = ['Find a sactuary', 'Conquer the dungeon', 'Seek an item in the dungeon',
    'Slay a rival', 'Hide from enemies', 'Recover from a battle', 'Avoid danger', 'Seek wealth']
    return(data[randint(0,len(motivation)-1)])

def hazard():
    data = ['Brown Mold', 'Green Slime', 'Shrieker', 'Spiderwebs', 'Violet fungus', 'Yellow Mold', 'Russet Mold',
    'hazard' + str(randint(0,99))]
    return(data[randint(0,len(data)-1)])

def feature():
    data = ['feature' + str(randint(0,99))]
    return(data[randint(0,len(data)-1)])

def furnishing():
    data = ['furnishing' + str(randint(0,99))]
    return(data[randint(0,len(data)-1)])

def utensil():
    data = ['utensil' + str(randint(0,99))]
    return(data[randint(0,len(data)-1)])

def book():
    data = ['book' + str(randint(0,99))]
    return(data[randint(0,len(data)-1)])

def antechamber():
    data = ['starting_area' + str(randint(0,99))]
    return(data[randint(0,len(data)-1)])

def lighting():
    data = ['well lit', 'dark', 'shadowy', 'dimly lit', 'smoky', 'misty', 'slimy', 'pungent',
    'cold', 'steamy']
    return(data[randint(0,len(data)-1)])

def passage():
    def length(): # 10 - 90 feet
        return(str(randint(1,18)*5) + ' feet')

    def width(): # 5 - 40 feet
        return(str(randint(1,8)*5) + ' feet wide and ')

    def description():
        description = ['corridor', 'passageway', 'narrow cavern', 'ravine']
        return(description[randint(0,len(description)-1)])

    detail = ['The passage continues ',
        'There is a door on the right.\nThe passage continues ',
        'There is a door on the left.\nThe passage continues ',
        'There is a side passage to the right.\nThe passage continues ',
        'There is a side passage to the left.\nThe passage continues ',
        'The passage turns left, continues ',
        'The passage turns right, continues ']
    return('\033[94m'
        + lighting() + ' '
        + description() + ' '
        + width()
        + length() + ' long ' #+ '\n'
        #+ detail[randint(0,len(detail)-1)]
        #+ length()
        + '\033[0m')

def door():
    door_type = ['a wooden door', 'a barred and locked wooden door', 'a stone door', 'archway',
        'jagged break in the wall', 'a barred and locked stone door', 'an iron door', 'a barred and locked iron door',
        'a portcullis', 'a locked portcullis', 'a wall (secret door)', 'a wall (barred and locked secret door)',
        'an elevator up', 'a shaft down', 'a chimney down', 'a chimney up', 'stairs up', 'wooden trapdoor',
        'iron trapdoor', 'stairs down', 'a ladder down', 'a ladder up']
    if randint(0,4) == 0:
        return('\033[32m' + door_type[randint(0,len(door_type)-1)] + '\033[0m (trapped)' + trap())
    else:
        return('\033[32m' + door_type[randint(0,len(door_type)-1)] + '\033[0m')

try:
    # dungeon_type = argv[1].lower()
    chamber_number = int(argv[1])

    print(antechamber() + '\n')
    # chamber()
    for i in range(chamber_number):
        print(door().capitalize()
        + '\n'
        + passage()
        + '\n'
        + door() + '. '
        + chamber() + '\n')

except IndexError:
    usage()
