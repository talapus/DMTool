#!/usr/bin/env python3

from random import randint
from random import choice
from random import shuffle
from sys import argv


def get_name():
    def get_vowel(number=1):
        vowels = ['a', 'e', 'i', 'o', 'u']
        shuffle(vowels)
        segment = ''
        for i in range(number):
            segment += vowels.pop()
        return segment

    def get_consonant(number=1):
        consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'p', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']
        shuffle(consonants)
        segment = ''
        for i in range(number):
            segment += consonants.pop()
        return segment


    def get_segment(segtype):
        if segtype == 'vowel':
            if randint(0, 1) == 0:
                segment = get_vowel(2)
            else:
                segment = get_vowel()
            return segment
        elif segtype == 'consonant':
            if randint(0, 1) == 0:
                segment = get_consonant(2)
            else:
                segment = get_consonant()
            return segment
        else:
            return None


    if randint(0, 1) == 0:
        name = get_consonant(1) + get_segment('vowel')
        if randint(0, 1) == 0:
            name += get_segment('consonant')
            if randint(0, 1) == 0:
                name += get_segment('vowel')
    else:
        name = get_segment('vowel') + get_segment('consonant')
        if randint(0, 1) == 0:
            name += get_segment('vowel')
            name += get_consonant(1)
            if randint(0, 1) == 0:
                name += get_segment('consonant')
                name += get_vowel(1)
 
    return name.title()


def get_alignment():
    alignments = ['lawful', 'neutral', 'chaotic']
    return choice(alignments)


def get_spell():
    spells = ['animal summoning', 'cantrip', 'charm person', 'chill touch', 'choking cloud', 
              'color spray', 'comprehend languages', 'detect magic', 'ekim\'s mystical mask', 
              'enlarge', 'feather fall', 'find familiar', 'flaming hands', 'force manipulation', 
              'invoke patron', 'magic missle', 'magic shield', 'mending', 'patron bond', 
              'read magic', 'ropework', 'runic alphabet: mortal', 'sleep', 'spider climb', 
              'ventriloquism', 'ward portal', 'Arcane affinity', 'detect evil', 'detect invisible', 
              'ESP', 'fire resistance', 'forget', 'onvisibility', 'invisible companion', 
              'knock', 'Levitate', 'Locate object', 'magic mouth', 'Mirror image', 
              'moster summoning', 'nythuul\'s porcupine coat', 'phantasm', 'ray of enfeedblement', 
              'scare', 'scorching ray', 'shatter', 'spider web', 'strength', 'wizard staff',
              'binding', 'breathe life', 'consult spirit', 'demon summoning', 'dispel magic', 
              'eldritch hound', 'emrikol\'s entropic maelstrom', 'eternal champion', 'fireball', 
              'fly', 'gust of wind', 'haste', 'lightning bolt', 'make potion', 'paralysis', 
              'planar step', 'runic alphabet: fey', 'slow', 'sword magic', 'transference', 
              'turn to stone', 'water breathing', 'write magic', 'control fire', 'control ice',
              'lokerimon\'s orderly assistance', 'polymorph', 'trasmute earth', 'wizard sense', 
              'hepsoj\'s fecud fungi', 'Lokerimon\'s unerring hunter', 'magic bulwark', 'mind purge', 
              'repliciation']
    return choice(spells)

try:
    ALIGNMENT = argv[1]
except:
    ALIGNMENT = get_alignment()
hp = randint(1, 4) + 2
ac = 14
special = ''

roll = randint(0, 35)
if roll < 12:
    familiar = 'familiar'
elif roll >= 12 and roll <= 17:
    familiar = 'guardian familiar'
    hp += randint(1, 4) + 2
    ac += 2
    special = 'Attack: +4 to hit, 1d6 damage, crit die 1d12, crit table III\n +1 to saves\n Attacks incrementally improve as the wizard gains levels'
elif roll >= 18 and roll <= 23:
    if ALIGNMENT == 'lawful':
        familiar = 'focal familiar'
        special = 'Attack: +1 to hit, 1d3 damage\n Wizard can see through the familiar\'s eyes in addition to telepathically communicating with it\n Wizard can cast spells with the familar as the point of origin, gaining +1 to spell to the check.'
    elif ALIGNMENT == 'neutral':
        familiar = 'arcane familiar'
        special = 'Attack: +1 to hit, 1d3 damage\n Spell: {}'.format(get_spell())
    elif ALIGNMENT == 'chaotic':
        familiar = 'demonic familiar'
        special = 'Attack: +2 to hit, 1d4 damage\n The familiar absorbs half of all corruption, or one point (whichever is more)\n A claim upon the wizards soul\n Immune to mortal diseases, poisons, toxins'
elif roll >= 24 and roll <= 29:
    if ALIGNMENT == 'lawful' or ALIGNMENT == 'neutral':
        familiar = 'focal familiar'
        special = 'Attack: +1 to hit, 1d3 damage\n Wizard can see through the familiar\'s eyes in addition to telepathically communicating with it\n Wizard can cast spells with the familar as the point of origin, gaining +1 to spell to the check.'
    elif ALIGNMENT == 'chaotic':
        familiar = 'arcane familiar'
        special = 'Attack: +1 to hit, 1d3 damage\n Spell: {}'.format(get_spell())
elif roll > 29:
    if ALIGNMENT == 'lawful':
        familiar = 'arcane familiar'
        special = 'Attack: +1 to hit, 1d3 damage\n Spell: {}'.format(get_spell())
    elif ALIGNMENT == 'neutral':
        familiar = 'demonic familiar'
        special = 'Attack: +2 to hit, 1d4 damage\n The familiar absorbs half of all corruption, or one point (whichever is more)\n A claim upon the wizard\'s soul\n Immune to mortal diseases, poisons, toxins'
    elif ALIGNMENT == 'chaotic':
        familiar = 'focal familiar'
        special = 'Attack: +1 to hit, 1d3 damage\n Wizard can see through the familiar\'s eyes in addition to telepathically communicating with it\n Wizard can cast spells with the familar as the point of origin, gaining +1 to spell to the check.'
else:
    print('{} {} none?'.format(roll, ALIGNMENT))

print('{} the {} {}'.format(get_name(), ALIGNMENT, familiar))
print(' INT:5, HP:{}'.format(hp))
if len(special) > 1:
    print('\n{}'.format(special))